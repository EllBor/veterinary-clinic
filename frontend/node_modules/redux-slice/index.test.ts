import { createSlice } from './index';

describe('createSlice returns', () => {
  it('list of actions', () => {
    const { actions } = createSlice({ value: 0 }, [
      { type: 'incrementCounter' },
      { type: 'decrementCounter' },
      { type: 'updateCounter', field: 'value' },
    ]);

    expect(
      actions.incrementCounter.toString(),
    ).toEqual(`(payload) => ({
      type: crumb.type,
      payload,
    })`);

    expect(
      actions.decrementCounter.toString(),
    ).toEqual(`(payload) => ({
      type: crumb.type,
      payload,
    })`);


    expect(
      actions.updateCounter.toString(),
    ).toEqual(`(payload) => ({
      type: crumb.type,
      payload,
    })`);
  });
  it('reducer', () => {
    const { reducer } = createSlice({ value: 0 }, [
      { type: 'incrementCounter' },
      { type: 'decrementCounter' },
      { type: 'updateCounter', field: 'value' },
    ]);

    expect(typeof reducer).toBe('function');
  });
  describe('reducer returns', () => {
    const { reducer } = createSlice({ value: 0 }, [
      { type: 'incrementCounter' },
      { type: 'decrementCounter' },
      { type: 'updateCounter', field: 'value' },
    ]);

    it('updated state when action is dispatched', () => {
      expect(reducer(
        { value: 0 },
        { type: 'updateCounter', payload: 2 },
      )).toEqual({ value: 2 });

      expect(reducer(
        { value: 0 },
        { type: 'incrementCounter' },
      )).toEqual({ value: 0 });
    });
  });
});
