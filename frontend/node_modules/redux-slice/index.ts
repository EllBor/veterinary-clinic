import { Reducer } from 'redux';

export type Action<Payload> = {
  type: string,
  payload?: Payload,
};

type Crumb = {
  type: string,
  field?: string,
};
type ActionCreator<Payload> = (payload?: Payload) => Action<Payload>;

// Payload should be enum of all possible payloads in current slice:
// type CounterPayload = IncrementCounterPayload
//   | DecrementCounterPayload
//   | UpdateCounterPayload;
export function createSlice<State, Payload>(
  initialState: State,
  crumbs: Crumb[],
): {
  actions: { [key: string]: ActionCreator<Payload> },
  reducer: Reducer<State, Action<Payload>>,
} {
  const actions = Object.fromEntries(
    crumbs.map((crumb: Crumb) => [
      crumb.type,
      (payload?: Payload): Action<Payload> => ({
        type: crumb.type,
        payload,
      }),
    ]),
  );

  const reducer = (
    state: State = initialState,
    action: Action<Payload>,
  ): State => {
    const crumb = crumbs.find((crumb: Crumb) => crumb.type === action.type);
    const isFieldInState = crumb?.field && crumb.field in state;

    return isFieldInState ? {
      ...state,
      [crumb.field as string]: action.payload,
    } : state;
  };

  return { actions, reducer };
}
