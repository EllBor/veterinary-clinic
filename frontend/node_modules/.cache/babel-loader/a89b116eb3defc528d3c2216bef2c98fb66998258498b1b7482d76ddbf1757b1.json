{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"../../axios\";\nexport const fetchServices = createAsyncThunk('services/fetchServices', async () => {\n  const {\n    data\n  } = await axios.get('/services');\n  return data;\n});\nexport const fetchOneService = createAsyncThunk('services/fetchOneService', async id => {\n  const {\n    data\n  } = await axios.get(`/services/${id}`);\n  return data;\n});\nexport const fetchDoctorsByService = createAsyncThunk('services/fetchDoctorsByService', async id => {\n  const {\n    data\n  } = await axios.get(`/doctor/services/${id}`);\n  // console.log(\"data\", data);\n  return data;\n});\nconst initialState = {\n  diagnostics: [],\n  service: [],\n  services: {\n    items: [],\n    status: 'loading'\n  }\n};\nconst servicesSlice = createSlice({\n  name: 'services',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchServices.pending, state => {\n      state.status = 'loading';\n      state.error = null;\n    }).addCase(fetchServices.fulfilled, (state, action) => {\n      state.status = 'loaded';\n      state.items = action.payload;\n    }).addCase(fetchServices.rejected, (state, action) => {\n      state.status = 'error';\n      state.error = action.error.message;\n    }).addCase(fetchOneService.pending, state => {\n      state.status = 'loading';\n      state.error = null;\n    }).addCase(fetchOneService.fulfilled, (state, action) => {\n      state.status = 'loaded';\n      state.diagnostics = action.payload.diagnostics;\n    }).addCase(fetchOneService.rejected, (state, action) => {\n      state.status = 'error';\n      state.error = action.error.message;\n    }).addCase(fetchDoctorsByService.pending, state => {\n      state.status = 'loading';\n      state.error = null;\n    }).addCase(fetchDoctorsByService.fulfilled, (state, action) => {\n      state.status = 'loaded';\n      state.doctor = action.payload[0].doctor;\n      // console.log(\"action.payload\", action.payload[0].doctor);\n    }).addCase(fetchDoctorsByService.rejected, (state, action) => {\n      state.status = 'error';\n      state.error = action.error.message;\n    });\n  }\n});\nexport const servicesReducer = servicesSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","fetchServices","data","get","fetchOneService","id","fetchDoctorsByService","initialState","diagnostics","service","services","items","status","servicesSlice","name","reducers","extraReducers","builder","addCase","pending","state","error","fulfilled","action","payload","rejected","message","doctor","servicesReducer","reducer"],"sources":["C:/Users/Елизавета/veterinary-clinic/frontend/src/redux/slices/services.js"],"sourcesContent":["import {createSlice, createAsyncThunk} from \"@reduxjs/toolkit\";\r\nimport axios from \"../../axios\";\r\n\r\nexport const fetchServices = createAsyncThunk('services/fetchServices', async () => {\r\n    const {data} = await axios.get('/services');\r\n    return data;\r\n})\r\n\r\nexport const fetchOneService = createAsyncThunk('services/fetchOneService', async (id) => {\r\n    const {data} = await axios.get(`/services/${id}`);\r\n    return data;\r\n})\r\n\r\nexport const fetchDoctorsByService = createAsyncThunk('services/fetchDoctorsByService', async (id) => {\r\n    const {data} = await axios.get(`/doctor/services/${id}`);\r\n    // console.log(\"data\", data);\r\n    return data;\r\n})\r\n\r\nconst initialState = {\r\n    diagnostics: [],\r\n    service: [],\r\n    services: {\r\n        items: [],\r\n        status: 'loading',\r\n    }\r\n};\r\n\r\nconst servicesSlice = createSlice({\r\n    name: 'services',\r\n    initialState,\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(fetchServices.pending, (state) => {\r\n                state.status = 'loading';\r\n                state.error = null;\r\n            })\r\n            .addCase(fetchServices.fulfilled, (state, action) => {\r\n                state.status = 'loaded';\r\n                state.items = action.payload;\r\n            })\r\n            .addCase(fetchServices.rejected, (state, action) => {\r\n                state.status = 'error';\r\n                state.error = action.error.message;\r\n            })\r\n            .addCase(fetchOneService.pending, (state) => {\r\n                state.status = 'loading';\r\n                state.error = null;\r\n            })\r\n            .addCase(fetchOneService.fulfilled, (state, action) => {\r\n                state.status = 'loaded';\r\n                state.diagnostics = action.payload.diagnostics;\r\n            })\r\n            .addCase(fetchOneService.rejected, (state, action) => {\r\n                state.status = 'error';\r\n                state.error = action.error.message;\r\n            })\r\n            .addCase(fetchDoctorsByService.pending, (state) => {\r\n                state.status = 'loading';\r\n                state.error = null;\r\n            })\r\n            .addCase(fetchDoctorsByService.fulfilled, (state, action) => {\r\n                state.status = 'loaded';\r\n                state.doctor = action.payload[0].doctor;\r\n                // console.log(\"action.payload\", action.payload[0].doctor);\r\n            })\r\n            .addCase(fetchDoctorsByService.rejected, (state, action) => {\r\n                state.status = 'error';\r\n                state.error = action.error.message;\r\n            });\r\n    },\r\n})\r\n\r\nexport const servicesReducer = servicesSlice.reducer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}